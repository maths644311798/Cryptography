/*
Advanced Encryption Standard
The irreducible polynomial of GF(2^8) is m(x) = x^8 + x^4 + x^3 + x + 1
const int Nr = 10; round number
const int Nk = 4; the seed has Nk words
AES-128  Nr=10, Nk = 4
AES-192  Nr=12, Nk = 6
AES-256  Nr=14, Nk = 8
For a 16-byte message "col", regard it as a 4 * 4 matrix.
The first column consists of col[0], col[1], col[2],col[3]
 */
#include <cmath>
#include <iostream>
#include<bitset>
#include<vector>
#include<string>

using namespace std;

typedef unsigned char byte;
typedef unsigned long word;

template <unsigned Nr, unsigned Nk>
class AES
{
public:

	// S-box
	static const byte S[256];

	//inverse S-box
	static const byte inv_S[256];

	static const word Rcon[11];

	//polynomial multilication mod m(x) = x^8 + x^4 + x^3 + x + 1
	byte field_mul(byte a, byte b)
	{
		byte temp[8] = { a };
		byte res = 0x00;
		for (int i = 1; i < 8; ++i)
		{
			temp[i] = (temp[i - 1] << 1) ^ ((temp[i - 1] & 0x80) ? 0x1B : 0x00);
		}

		for (int i = 0; i < 8; ++i)
		{
			res ^= ((b >> i) & 0x01) * temp[i];
		}

		return res;
	}

	void SubBytes(byte* col)
	{
		for (int x = 0; x < (Nk << 2); x++)
		{
			col[x] = S[col[x]];
		}
	}

	void Inverse_SubBytes(byte* col)
	{
		for (int x = 0; x < (Nk << 2); x++)
		{
			col[x] = inv_S[col[x]];
		}
	}

	void ShiftRows(byte* col)
	{
		byte t;
		t = col[1]; col[1] = col[5]; col[5] = col[9]; col[9] = col[13]; col[13] = t;
		t = col[2]; col[2] = col[10]; col[10] = t;
		t = col[6]; col[6] = col[14]; col[14] = t;
		t = col[15]; col[15] = col[11]; col[11] = col[7]; col[7] = col[3]; col[3] = t;
	}

	void Inverse_ShiftRows(byte* col)
	{
		byte t;
		t = col[13]; col[13] = col[9]; col[9] = col[5]; col[5] = col[1]; col[1] = t;
		t = col[2]; col[2] = col[10]; col[10] = t;
		t = col[6]; col[6] = col[14]; col[14] = t;
		t = col[3]; col[3] = col[7]; col[7] = col[11]; col[11] = col[15]; col[15] = t;
	}

	void MixColumns(byte* col)
	{
		byte temp[4];
		for (int i = 0; i < 4; i++, col += 4)
		{
			temp[0] = field_mul(0x02, col[0]) ^ field_mul(0x03, col[1]) ^ col[2] ^ col[3];
			temp[1] = col[0] ^ field_mul(0x02, col[1]) ^ field_mul(0x03, col[2]) ^ col[3];
			temp[2] = col[0] ^ col[1] ^ field_mul(0x02, col[2]) ^ field_mul(0x03, col[3]);
			temp[3] = field_mul(0x03, col[0]) ^ col[1] ^ col[2] ^ field_mul(0x02, col[3]);
			col[0] = temp[0];
			col[1] = temp[1];
			col[2] = temp[2];
			col[3] = temp[3];
		}

	}

	void Inverse_MixColumns(byte* col)
	{
		byte temp[4];
		for (int i = 0; i < 4; i++, col += 4)
		{
			temp[0] = field_mul(0x0E, col[0]) ^ field_mul(0x0B, col[1]) ^ field_mul(0x0D, col[2]) ^ field_mul(0x09, col[3]);
			temp[1] = field_mul(0x09, col[0]) ^ field_mul(0x0E, col[1]) ^ field_mul(0x0B, col[2]) ^ field_mul(0x0D, col[3]);
			temp[2] = field_mul(0x0D, col[0]) ^ field_mul(0x09, col[1]) ^ field_mul(0x0E, col[2]) ^ field_mul(0x0B, col[3]);
			temp[3] = field_mul(0x0B, col[0]) ^ field_mul(0x0D, col[1]) ^ field_mul(0x09, col[2]) ^ field_mul(0x0E, col[3]);
			col[0] = temp[0];
			col[1] = temp[1];
			col[2] = temp[2];
			col[3] = temp[3];
		}
	}

	void AddRoundKey(byte* col, byte* ExpansionKey, unsigned int round)
	{
		for (int x = 0; x < (Nk << 2); x++)
		{
			col[x] ^= ExpansionKey[round * (Nk << 2) + x];
		}
	}

public:
	byte ExtendedKey[(Nr + 2) * Nk * 4];

	void ExtendKey(const byte* inkey, byte* outkey)
	{
		//inkey:16 byte key
		//outkey：44 word extension key
		byte temp[4], t;
		int x = 0, i = 0;

		for (i = 0; i < (4 * Nk); i++)
		{
			outkey[i] = inkey[i];
		}

		i = Nk;
		while (i < (4 * (Nr + 1)))
		{
			for (x = 0; x < 4; x++)
				temp[x] = outkey[(4 * (i - 1)) + x];
			if (i % Nk == 0)
			{
				/*RotWord()*/
				t = temp[0]; temp[0] = temp[1]; temp[1] = temp[2]; temp[2] = temp[3]; temp[3] = t;
				/*SubWord()*/
				for (x = 0; x < 4; x++)
				{
					temp[x] = S[temp[x]];
				}
				word Rcon_copy = Rcon[i / Nk];
				for (x = 0; x < 4; x++)
				{
					t = Rcon_copy & 0xFF;
					temp[x] ^= t;
					Rcon_copy = Rcon_copy >> 8;
				}
			}
			for (x = 0; x < 4; x++)
			{
				outkey[(4 * i) + x] = outkey[(4 * (i - Nk)) + x] ^ temp[x];
			}
			++i;
		}
	}

	void Encrypt(byte* blk, const byte* Key)
	{

		ExtendKey(Key, ExtendedKey);
		AddRoundKey(blk, ExtendedKey, 0);

		for (unsigned int round = 1; round <= (Nr - 1); round++)
		{
			SubBytes(blk);
			ShiftRows(blk);
			MixColumns(blk);
			AddRoundKey(blk, ExtendedKey, round);
		}

		SubBytes(blk);
		ShiftRows(blk);
		AddRoundKey(blk, ExtendedKey, Nr);
	}

	void Decrypt(byte* blk, byte* Key)
	{
		ExtendKey(Key, ExtendedKey);
		AddRoundKey(blk, ExtendedKey, Nr);
		Inverse_ShiftRows(blk);
		Inverse_SubBytes(blk);
		for (unsigned int x = (Nr - 1); x >= 1; x--)
		{
			AddRoundKey(blk, ExtendedKey, x);
			Inverse_MixColumns(blk);
			Inverse_ShiftRows(blk);
			Inverse_SubBytes(blk);
		}
		AddRoundKey(blk, ExtendedKey, 0);
	}

};

const byte AES<10, 4>::S[] = {
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

const byte AES<10, 4>::inv_S[] = {
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

const word AES<10, 4>::Rcon[] = {
		0x0UL,
		0x00000001UL, 0x00000002UL, 0x00000004UL, 0x00000008UL, 0x00000010UL,
		0x00000020UL, 0x00000040UL, 0x00000080UL, 0x0000001BUL, 0x00000036UL
};

int main()
{
	AES<10, 4> f;
	byte plaintext[17], key[17];

	strcpy((char*)plaintext, "SJTUandFDUbirthd");
	printf("plaintext is %s\n", plaintext);
	strcpy((char*)key, "IloveSJTUforever");

	/*Encrypt */
	f.Encrypt(plaintext, key);
	printf("ciphertext: ");
	for (int i = 0; i < 16; i++)
	{
		printf("%02x ", plaintext[i]);
	}
	printf("\n");
	printf("\n");

	//decrypt
	f.Decrypt(plaintext, key);
	printf("The decrypted plaintext is: %s", plaintext);

	return 0;
}
